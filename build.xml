<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenRoss" default="build">
 <property name="php" value="php"/>

 <target name="build"
   depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpdox"/>

 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${basedir}/bin"/>
  <delete dir="${basedir}/vendor"/>
  <delete file="${basedir}/composer.lock"/>
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/code-browser"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phar"/>
  <delete dir="${basedir}/build/phpdox"/>
 </target>

 <target name="prepare" description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/code-browser"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/phpdox"/>
 </target>

 <target name="download-composer" description="Downloads composer.phar (when it does not exist or is older than 30 days)">
  <tstamp>
   <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
  </tstamp>
  <delete>
   <fileset dir="${basedir}">
    <include name="composer.phar" />
    <date datetime="${thirty.days.ago}" when="before"/>
   </fileset>
  </delete>

  <get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>
 </target>

 <target name="composer" depends="download-composer" description="Install dependencies with Composer">

  <exec executable="php">
   <arg value="composer.phar"/>
   <arg value="install"/>
  </exec>
 </target>

 <target name="lint">
  <apply executable="${php}" failonerror="true" append="true" output="${basedir}/build/logs/lint.txt">
   <arg value="-l" />

   <fileset dir="${basedir}/src">
    <include name="**/*.php" />
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
   </fileset>
  </apply>
  <echo message="###teamcity[publishArtifacts '${basedir}/build/logs/lint.txt']" />
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="phploc" output="${basedir}/build/logs/phploc.txt">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg value="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/src" />
  </exec>
  <echo message="###teamcity[publishArtifacts '${basedir}/build/logs/phploc.txt']" />
  <echo message="###teamcity[publishArtifacts '${basedir}/build/logs/phploc.xml']" />
 </target>

 <target name="pdepend"
         description="Calculate software metrics using PHP_Depend">
  <exec executable="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/src" />
   <arg value="text" />
   <arg value="${basedir}/build/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/src" />
   <arg value="xml" />
   <arg value="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phpcs-ci"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpunit" description="Run unit tests with PHPUnit">
  <exec executable="${php}" failonerror="true">
   <arg path="${basedir}/src" />
  </exec>
 </target>

 <target name="phpdoc"
         description="Generate software project documentation using phpDocumentor">
  <exec executable="phpdoc">
   <arg value="-d ${basedir}/src" />
   <arg value="-t ${basedir}/build/api" />
 </target>
</project>
